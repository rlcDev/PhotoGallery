{"version":3,"sources":["BasePage/Landscape.js","BasePage/Art.js","BasePage/Home.js","BasePage/DataModel.js","BasePage/Category.js","BasePage/Header.js","BasePage/Footer.js","BasePage/Routes.js","BasePage/BasePage.js","App.js","serviceWorker.js","index.js"],"names":["Landscape","state","IMAGES","fetch","METADATA_LANDSCAPE_URL","then","res","json","rows","setState","landscape","images","this","React","Component","Art","METADATA_ART_URL","art","Home","className","WELCOME_MESSAGE","HEADER_TITLE","COPYRIGHT","CATEGORIES","name","path","component","Category","props","to","key","index","Link","Header","bg","variant","Brand","map","data","categoryTmp","Footer","fixed","style","customFooter","customCopyright","height","color","fontSize","Routes","c","exact","BasePage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wQA0BeA,E,2MApBXC,MAAQ,CACJC,OAAQ,I,oFAKU,IAAD,OACjBC,MAAMC,GACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GAAD,OAAU,EAAKC,SAAS,CAAEP,OAAQM,EAAKE,iB,+BAIjD,OACI,6BACI,kBAAC,IAAD,CAASC,OAAQC,KAAKX,MAAMC,c,GAjBpBW,IAAMC,WCqBfC,E,2MAnBXd,MAAQ,CACJC,OAAQ,I,oFAIU,IAAD,OACjBC,MAAMa,GACDX,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GAAD,OAAU,EAAKC,SAAS,CAAEP,OAAQM,EAAKS,W,+BAIjD,OACI,6BACI,kBAAC,IAAD,CAASN,OAAQC,KAAKX,MAAMC,c,GAhB1BW,IAAMC,W,OCUTI,MAVf,WAEI,OACI,yBAAKC,UAAU,WACX,wBAAIA,UAAU,gBACTC,KCLJC,EAAe,UACfC,EAAY,aACZF,EAAkB,UAClBhB,EAAyB,oGACzBY,EAAmB,8FAEnBO,EAAa,CACtB,CACIC,KAAM,GACNC,KAAM,IACNC,UAAWR,GAEf,CACIM,KAAM,YACNC,KAAM,aACNC,UAAW1B,GAEf,CACIwB,KAAM,MACNC,KAAM,OACNC,UAAWX,I,yBCVJY,MAVf,SAAkBC,GAEhB,OACE,kBAAC,gBAAD,CAAeC,GAAID,EAAMH,KAAMK,IAAKF,EAAMG,OACxC,kBAAC,IAAIC,KAAL,KACGJ,EAAMJ,QCsBAS,MAxBf,WAEE,OACE,kBAAC,IAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAAC,gBAAD,CAAeN,GAAK,KAClB,kBAAC,IAAOO,MAAR,KACGf,IAGL,kBAAC,IAAD,CAAKF,UAAU,WAEXI,EAAWc,KAAI,SAACC,EAAMP,GACpB,IAAIQ,EAIJ,MAHkB,KAAdD,EAAKd,OACPe,EAAcZ,EAASW,EAAMP,IAExBQ,QCRJC,MAXf,WAEI,OACI,kBAAC,IAAD,CAAQN,GAAG,OAAOO,MAAM,SAASC,MAAQC,GACrC,yBAAKD,MAASE,GACVtB,KAQVqB,EAAe,CACjBE,OAAQ,MAGND,EAAkB,CACpBE,MAAM,QACNC,SAAU,O,gBCVCC,MATf,WAEI,OACIzB,EAAWc,KAAI,SAACY,EAAGlB,GACf,OAAO,kBAAC,IAAD,CAAOmB,OAAK,EAACzB,KAAMwB,EAAExB,KAAMC,UAAWuB,EAAEvB,UAAWI,IAAKC,QCS5DoB,MAVf,WACI,OACI,kBAAC,aAAD,KACI,kBAAC,EAAD,MACKH,IACL,kBAAC,EAAD,QCJGI,MANf,WACE,OACE,kBAAC,EAAD,OCQgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,MAAK,SAAA4D,GACjCA,EAAaC,iB","file":"static/js/main.e9df595a.chunk.js","sourcesContent":["import React from 'react';\nimport Gallery from 'react-grid-gallery';\nimport { METADATA_LANDSCAPE_URL } from './DataModel';\n\nclass Landscape extends React.Component {\n\n    state = {\n        IMAGES: []\n    }\n\n    // Need to fetch data from photoGalleryMetadata to display it\n    // The use of react component lifecycle is needed, need to find another way\n    componentWillMount() {\n        fetch(METADATA_LANDSCAPE_URL)\n            .then(res => res.json())\n            .then((rows) => this.setState({ IMAGES: rows.landscape }))\n    }\n\n    render() {\n        return (\n            <div>\n                <Gallery images={this.state.IMAGES}/>\n            </div>\n        )\n    }\n}\nexport default Landscape;\n","import React from 'react';\nimport Gallery from 'react-grid-gallery';\nimport { METADATA_ART_URL } from './DataModel';\n\nclass Art extends React.Component {\n\n    state = {\n        IMAGES: []\n    }\n\n    // Idem\n    componentWillMount() {\n        fetch(METADATA_ART_URL)\n            .then(res => res.json())\n            .then((rows) => this.setState({ IMAGES: rows.art }))\n    }\n\n    render() {\n        return (\n            <div>\n                <Gallery images={this.state.IMAGES}/>\n            </div>\n        )\n    }\n}\nexport default Art;\n","import React from 'react';\nimport './home.css';\nimport { WELCOME_MESSAGE } from './DataModel';\n\nfunction Home() {\n\n    return (\n        <div className=\"fade-in\">\n            <h1 className=\"welcomeStyle\">\n                {WELCOME_MESSAGE}\n            </h1>\n        </div>\n    )\n}\nexport default Home;","import Landscape from './Landscape';\nimport Art from './Art';\nimport Home from './Home';\n\nexport const HEADER_TITLE = \"@rlcdev\";\nexport const COPYRIGHT = \"Â©rlcdev\";\nexport const WELCOME_MESSAGE = \"Welcome\";\nexport const METADATA_LANDSCAPE_URL = \"https://raw.githubusercontent.com/rlcDev/PhotoGalleryMetadata/master/photosLandscapeMetadata.json\";\nexport const METADATA_ART_URL = \"https://raw.githubusercontent.com/rlcDev/PhotoGalleryMetadata/master/photosArtMetadata.json\";\n\nexport const CATEGORIES = [\n    {\n        name: \"\",\n        path: \"/\",\n        component: Home\n    },\n    {\n        name: \"Landscape\",\n        path: \"/landscape\", \n        component: Landscape\n    },\n    {\n        name: \"Art\",\n        path: \"/art\",\n        component: Art\n    }\n];","import React from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Nav from 'react-bootstrap/Nav';\n\nfunction Category(props) {\n\n  return (\n    <LinkContainer to={props.path} key={props.index}>\n      <Nav.Link>\n        {props.name}\n      </Nav.Link>\n    </LinkContainer>\n  )\n}\nexport default Category;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { HEADER_TITLE, CATEGORIES } from './DataModel';\nimport Category from './Category';\nimport Nav from 'react-bootstrap/Nav';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nfunction Header() {\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <LinkContainer to = \"/\">\n        <Navbar.Brand>\n          {HEADER_TITLE}\n        </Navbar.Brand>\n      </LinkContainer>\n      <Nav className=\"mr-auto\">\n        {\n          CATEGORIES.map((data, index) => {\n            let categoryTmp;\n            if (data.name !== \"\") {\n              categoryTmp = Category(data, index)\n            }\n            return categoryTmp\n          })\n        }\n      </Nav>\n    </Navbar>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { COPYRIGHT } from './DataModel';\n\nfunction Footer() {\n\n    return (\n        <Navbar bg=\"dark\" fixed=\"bottom\" style= {customFooter}>\n            <div style = {customCopyright}>\n               {COPYRIGHT}\n            </div>\n        </Navbar>\n    )\n}\n\nexport default Footer;\n\nconst customFooter = {\n    height: '4%'\n}\n\nconst customCopyright = {\n    color:'white', \n    fontSize: '80%'\n}","import React from 'react';\nimport { CATEGORIES } from \"./DataModel\";\nimport { Route } from 'react-router-dom';\n\nfunction Routes() {\n\n    return (\n        CATEGORIES.map((c, index) => {\n            return <Route exact path={c.path} component={c.component} key={index} />\n        })\n    )\n}\n\nexport default Routes;","import React from 'react';\nimport Header from './Header'\nimport Footer from './Footer';\n\nimport { HashRouter as Router } from 'react-router-dom'\nimport Routes from './Routes';\n\nfunction BasePage() {\n    return (\n        <Router>\n            <Header />\n                {Routes()}\n            <Footer />\n        </Router>\n    )\n}\n\nexport default BasePage;\n","import React from 'react';\nimport BasePage from './BasePage/BasePage'\nfunction App() {\n  return (\n    <BasePage/>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}